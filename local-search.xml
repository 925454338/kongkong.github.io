<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>hexo搭建与部署</title>
    <link href="/2024/06/13/hexo-build-deploy/"/>
    <url>/2024/06/13/hexo-build-deploy/</url>
    
    <content type="html"><![CDATA[<h1 id="1-什么是Hexo"><a href="#1-什么是Hexo" class="headerlink" title="1.什么是Hexo"></a>1.什么是Hexo</h1><p>Hexo 是一个基于 Node.js 的静态博客框架。它可以将 Markdown 文件生成静态网页，用户只需将这些网页上传到服务器即可。Hexo 的特点包括：</p><ol><li><strong>快速</strong>：Hexo 能够快速生成静态页面，相比于动态博客系统有更好的性能和加载速度。</li><li><strong>简单</strong>：通过简单的命令行操作，用户可以方便地创建和管理博客内容。</li><li><strong>灵活</strong>：支持自定义主题和插件，可以根据个人需求进行拓展和定制。</li><li><strong>部署方便</strong>：支持一键部署到 GitHub Pages、Heroku、Netlify 等平台。</li></ol><p>Hexo 主要适合那些对前端开发有一定了解，且希望通过 Markdown 简单快捷地写作并发布内容的用户。</p><h2 id="2-本地下载Hexo（windows环境）"><a href="#2-本地下载Hexo（windows环境）" class="headerlink" title="2.本地下载Hexo（windows环境）"></a>2.本地下载Hexo（windows环境）</h2><ol><li><p>安装<code>Node.js</code>和<code>npm</code></p><p>Hexo 依赖于 Node.js 和 npm（Node 包管理器），所以首先需要安装它们。可以从 <a href="https://nodejs.org/">Node.js 官网</a> 下载并安装。</p><p><code>Node.js</code>安装过程无需赘述，直接下一步即可。安装完成后可以在命令行窗口使用<code>node -v</code>查看<code>node</code>的版本。<code>Node.js</code>会自带<code>npm</code>，使用<code>npm -v</code>可以查看<code>npm</code>的版本信息。</p><p>需要注意的是，一般需要给npm配置国内镜像源。我个人一般使用的是淘宝的镜像。</p><p>a. 临时使用淘宝的镜像源：</p><p>在执行<code>npm install</code>命令时，在命令行中添加 <code>--registry</code> 选项，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install package-name --registry=https://registry.npmmirror.com<br></code></pre></td></tr></table></figure><p>b. 永久修改 npm 的镜像源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> registry https://registry.npmmirror.com<br></code></pre></td></tr></table></figure><p>验证是否修改成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config get registry<br></code></pre></td></tr></table></figure><p>如果返回 <code>https://registry.npmmirror.com</code>，则说明设置成功。</p><p>也可以使用 cnpm 或者 配置 <code>.npmrc</code> 文件来设置镜像源，我认为 b 方法就可以，其他方法了解就行。</p></li><li><p>安装 Hexo</p><p>通过 npm 安装 Hexo 脚手架：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p><code>-g</code> 是全局安装，萌新这样安装就行，熟练的可以仅在指定的目录安装。</p></li></ol><h1 id="3-创建-Hexo-项目"><a href="#3-创建-Hexo-项目" class="headerlink" title="3.创建 Hexo 项目"></a>3.创建 Hexo 项目</h1><ol><li><p>初始化 Hexo 项目</p><p>选择一个目录，然后在该目录中初始化一个新的 Hexo 项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 初始化项目，会在当前目录创建一个名为 my-blog 的文件夹，里面有基本的项目框架</span><br>hexo init my-blog <br><span class="hljs-comment"># 进入到项目目录</span><br><span class="hljs-built_in">cd</span> my-blog<br><span class="hljs-comment"># 使用 npm 安装项目需要的依赖</span><br>npm install<br></code></pre></td></tr></table></figure><p>这将创建一个包含初始文件结构的新博客项目，并安装必要的依赖。</p></li><li><p>生成网站文件</p><p>使用以下命令可以生成静态文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo generate<br></code></pre></td></tr></table></figure></li><li><p>启动本地服务器</p><p>使用以下命令在本地启动一个测试服务器，以便预览博客：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server<br></code></pre></td></tr></table></figure></li><li><p>创建新文章</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new post <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>执行这个命令，将在 <code>source/_posts</code> 目录下创建一个名为 “My-New-Post.md” 新的 Markdown 文件。你可以编辑这个文件来撰写文章内容。</p></li></ol><h1 id="4-自定义Hexo-主题"><a href="#4-自定义Hexo-主题" class="headerlink" title="4.自定义Hexo 主题"></a>4.自定义Hexo 主题</h1><p>​Hexo 默认使用一个简单的主题。你可以选择其他主题或者创建自己的主题。</p><p>​下载并应用主题</p><p>​在 Hexo 主题库 找到你喜欢的主题，然后按照主题的文档进行安装和配置。通常的步骤包括下载主题并修改 <code>_config.yml</code> 中的 <code>theme</code> 字段。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在博客根目录下</span><br>git <span class="hljs-built_in">clone</span> https://github.com/hexojs/hexo-theme-landscape themes/landscape<br><span class="hljs-comment"># 修改配置文件 _config.yml</span><br>theme: landscape<br></code></pre></td></tr></table></figure><h1 id="5-部署博客"><a href="#5-部署博客" class="headerlink" title="5.部署博客"></a>5.部署博客</h1><p>​Hexo 提供了多种部署方式，常见的是部署到 GitHub Pages。</p><ol><li><p>安装部署插件</p><p>安装 Hexo 的 Git 部署插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure></li><li><p>配置部署信息</p><p>在 <code>_config.yml</code> 文件中添加部署信息：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/username/username.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><p>确保将 <code>username</code> 替换为你的 GitHub 用户名，并根据实际情况调整分支名。</p></li><li><p>部署到 GitHub Pages</p><p>使用以下命令生成并部署博客：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 清除之前生成的静态文件</span><br>hexo clean<br><span class="hljs-comment"># 生成新的静态文件</span><br>hexo generate<br><span class="hljs-comment"># 部署到github Pages</span><br>hexo deploy<br></code></pre></td></tr></table></figure><p>这里需要注意：仓库的名称格式必须是 <code>username.github.io.git</code> 。</p></li><li><p>部署到远程服务器</p><p>部署远程服务器本地需要安装<code>cwrsync</code> ,可以在<a href="https://www.itefix.net/cwrsync-client">cwRsync - Rsync Client for Windows | itefix.net</a>进行下载。</p><p>下载后需要解压并配置path环境变量。</p><p>服务器端也需要安装。</p><p>服务器端安装好以后，需要在 <code>~/ssh/</code>下的 authorized_keys 文件中配置 ssh 公钥信息。</p><p>在 <code>_config.yml</code> 文件中添加部署信息：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br> <span class="hljs-attr">type:</span> <span class="hljs-string">rsync</span><br> <span class="hljs-attr">host:</span> <span class="hljs-string">yourhost</span><br> <span class="hljs-attr">user:</span> <span class="hljs-string">ecs-user</span><br> <span class="hljs-attr">root:</span> <span class="hljs-string">/home/ecs-user/www/blog/</span><br> <span class="hljs-attr">delete:</span> <span class="hljs-literal">true</span><br> <span class="hljs-attr">port:</span> <span class="hljs-number">22</span><br></code></pre></td></tr></table></figure><p>root路径根据实际情况配置。</p><p>如果想同时发布到githubpages和远程服务也可以，hexo 支持配置多个发布环境。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>    <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:yourname/yourname.github.io.git</span><br>    <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">rsync</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">xxx.xxx.xxx.xxx</span><br>    <span class="hljs-attr">user:</span> <span class="hljs-string">ecs-user</span><br>    <span class="hljs-attr">root:</span> <span class="hljs-string">/home/ecs-user/www/blog/</span><br>    <span class="hljs-attr">delete:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">22</span><br></code></pre></td></tr></table></figure></li><li><p>部署到远程服务器需要配置 nginx</p><p>已 Debian 系统为例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 更新包列表</span><br>sudo apt update<br><br><span class="hljs-comment"># 安装 Nginx</span><br>sudo apt install nginx<br></code></pre></td></tr></table></figure><p>配置防火墙：因为我自己是云服务器，可以直接在控制台开，其他的方法暂时不知道。</p><p>配置ssh访问：</p><p>​生成 ssh 密钥对</p><p>​确保可以通过 SSH 无密码登录到远程服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-copy-id username@remote_server_ip<br></code></pre></td></tr></table></figure><p>配置 nginx </p><ol><li><p>创建 nginx 配置文件</p><p>在 <code>/etc/nginx/sites-available/</code> 目录下创建一个新的配置文件，例如 <code>my-blog</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nano /etc/nginx/sites-available/my-blog<br></code></pre></td></tr></table></figure><p>添加如下内容：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span> your_domain_or_ip;<br><br>    <span class="hljs-section">location</span> / &#123;<br>        <span class="hljs-attribute">root</span> /var/www/my-blog;<br>        <span class="hljs-attribute">index</span> index.html index.htm;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>启用 nginx 配置</p><p>启用新配置并重启 Nginx：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">ln</span> -s /etc/nginx/sites-available/my-blog /etc/nginx/sites-enabled/<br>sudo nginx -t<br>sudo systemctl restart nginx<br></code></pre></td></tr></table></figure></li></ol></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>linux 服务器配置 clash 使用 vpn 网络</title>
    <link href="/2024/06/13/linux-clash-vpn/"/>
    <url>/2024/06/13/linux-clash-vpn/</url>
    
    <content type="html"><![CDATA[<p>背景：国内的docker镜像源出现不能访问的情况。考虑到之后可能会出现的信创相关改造，会使查找资源变得更加困难，所以查询资料，整理了这份文档。</p><p>选择使用的<code>vpn</code>工具是<code>Clash</code>。</p><h6 id="1-下载"><a href="#1-下载" class="headerlink" title="1. 下载"></a>1. 下载</h6><p>因为clash因为某些原因，<code>github</code>上的仓库已经被删除。经过一番查找，<a href="https://github.com/Loyalsoldier/clash-rules/tree/hidden">clash-rules</a> 这个项目里收藏有相关的安装包。</p><p>安装包地址：<code>https://github.com/Loyalsoldier/clash-rules/blob/hidden/software/clash-premium/clash-linux-amd64-v3-2023.08.17.gz</code></p><p>下载好安装包后，将安装包上传到服务器，可以暂时先放在home目录下。也可以直接使用wget命令下载。</p><p><code>wget https://raw.githubusercontent.com/Loyalsoldier/clash-rules/hidden/software/clash-premium/clash-linux-amd64-v3-2023.08.17.gz</code></p><p>我下载的是2023.08.17版本。</p><p>解压文件：</p><p><code>gunzip clash-linux-amd64-v3-2023.08.17.gz</code></p><p>给文件添加可执行权限：</p><p><code>chmod clash-linux-amd64-v3-2023.08.17</code></p><p>移动文件到<code>/usr/local/bin/clash</code>目录：</p><p><code>sudo mv clash-linux-amd64-v3-2023.08.17 /usr/local/bin/clash</code></p><h6 id="2-配置Clash"><a href="#2-配置Clash" class="headerlink" title="2. 配置Clash"></a>2. 配置Clash</h6><p>Clash 的配置文件通常是 <code>config.yaml</code>。创建一个配置文件目录并下载或编写配置文件：</p><p><code>mkdir -p ~/.config/clash</code></p><p><code>nano ~/.config/clash/config.yaml</code></p><p><code>config.yaml</code>这个文件的内容可以直接复制windows系统的<code>Clash</code>配置的内容，不是必须非得执行上面的<code>nano</code>命令。</p><h6 id="3-运行Clash"><a href="#3-运行Clash" class="headerlink" title="3.运行Clash"></a>3.运行Clash</h6><p>Clash的启动命令是：<code>clash -d ~/.config/clash</code></p><p>启动后，需要设置系统代理，使系统流量通过<code>Clash</code>。设置系统代理可以使用环境变量或配置网络管理器。</p><p>使用环境变量需要执行命令：</p><p><code>export http_proxy=http://127.0.0.1:7890</code></p><p><code>export https_proxy=http://127.0.0.1:7890</code></p><p>配置系统的<code>http</code>代理和<code>https</code>代理。</p><p>要使<code>Clash</code>启动后在后台运行，可以使用<code>nohup</code>命令：</p><p><code>nohup clash -d ~/.config/clash &gt; clash.log 2&gt;&amp;1 &amp;</code></p><p>这个命令会将<code>Clash </code>的输出重定向到 <code>clash.log</code> 文件中，并在后台运行。</p><p>也可以使用 <code>systemd</code> 服务文件可以让 Clash 在系统启动时自动启动，并在后台运行。因为觉得没这个必要，所以没有去实践，只在这里稍微记录一下。</p><h6 id="4-停止Clash"><a href="#4-停止Clash" class="headerlink" title="4.停止Clash"></a>4.停止Clash</h6><p><code>nohup</code>命令启动的程序，可以使用命令：</p><p><code>ps aux | grep clash</code> 找到 Clash 的进程 ID (PID)</p><p>然后使用：</p><p><code>kill</code> <PID>  结束<code>Clash</code>的进程。</p><p>结束进程后，需要将之前设置的环境变量恢复。使用 <code>unset</code> 命令可以清除代理环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">unset</span> http_proxy<br><span class="hljs-built_in">unset</span> https_proxy<br><span class="hljs-built_in">unset</span> all_proxy<br><span class="hljs-built_in">unset</span> HTTP_PROXY<br><span class="hljs-built_in">unset</span> HTTPS_PROXY<br><span class="hljs-built_in">unset</span> ALL_PROXY<br></code></pre></td></tr></table></figure><p>也可以在 <code>~/.bashrc</code> 或 <code>~/.profile</code> 中移除这些环境变量设置，然后重新加载文件或重新启动终端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 编辑 .bashrc 或 .profile 文件</span><br>nano ~/.bashrc<br><span class="hljs-comment"># 删除或注释掉代理设置行，例如：</span><br><span class="hljs-comment"># export http_proxy=http://127.0.0.1:7890</span><br><span class="hljs-comment"># export https_proxy=http://127.0.0.1:7890</span><br><span class="hljs-comment"># 保存文件后重新加载 .bashrc</span><br><span class="hljs-built_in">source</span> ~/.bashrc<br><br></code></pre></td></tr></table></figure><h6 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h6><p>在第一次运行<code>Clash</code>时，提示没有找到<code>Country.mmdb</code>，且自动下载失败，根据提示的内容，在有外网环境的电脑上手动下载。下载地址：</p><p><code>https://cdn.jsdelivr.net/gh/Dreamacro/maxmind-geoip@release/Country.mmdb</code></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/06/10/hello-world/"/>
    <url>/2024/06/10/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
